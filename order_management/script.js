document.addEventListener('DOMContentLoaded', function() {
  // ----------------- Elements -----------------

  const placeOrderBtn = document.getElementById('placeorderButton');
  const modalOverlay = document.getElementById('modalOverlay');
  const closeBtn = document.getElementById('closeBtn');
  const cancelBtn = document.getElementById('cancelBtn');
  const orderForm = document.getElementById('orderForm');
  const orderIdInput = document.getElementById('orderId');
  const successMessage = document.getElementById('successMessage');

  const productSelect = document.getElementById('product');
  const sizeInput = document.getElementById('size');
  const quantityInput = document.getElementById('quantity');
  const totalPriceInput = document.getElementById('total_price');

  const statusSelect = document.getElementById('status');
  const paymentCheckbox = document.getElementById('payment');
  const deliveryCheckbox = document.getElementById('delivery');

  const searchInput = document.getElementById('searchInput');
  const productFilter = document.getElementById('productFilter');
  const statusFilter = document.getElementById('statusFilter');
  const buyerFilter = document.getElementById('buyerFilter');
  const sortFilter = document.getElementById('sortFilter');
  const resetFilterBtn = document.getElementById('resetFilterBtn');
  const table = document.querySelector('.data-table');
  const tableRows = table.querySelectorAll('tbody tr.order-row');

  // ----------------- Modal Functions -----------------
function openModal(isEdit = false) {
    if (!isEdit) {
      orderForm.reset();

      // ✅ Use the existing ID generated by PHP
      // orderIdInput already has the correct value from index.php
      // So we don't overwrite it
      // orderIdInput.value = ''; // REMOVE this line

      orderForm.action = 'add_order.php';
      document.getElementById('isEdit').value = '0';
      document.querySelector('.modal-header h2').textContent = 'Place Order';
      document.querySelector('.save-btn').textContent = 'Save Order';
      totalPriceInput.value = '';
      statusSelect.value = 'Pending';
      paymentCheckbox.checked = false;
      deliveryCheckbox.checked = false;
    }
    modalOverlay.classList.add('active');
    document.body.style.overflow = 'hidden';
}


  function closeModal() {
    orderForm.reset();
    totalPriceInput.value = '';
    modalOverlay.classList.remove('active');
    document.body.style.overflow = 'auto';
    successMessage.style.display = 'none';
  }

  placeOrderBtn.addEventListener('click', () => openModal());
  closeBtn.addEventListener('click', closeModal);
  cancelBtn.addEventListener('click', closeModal);
  modalOverlay.addEventListener('click', e => { if (e.target === modalOverlay) closeModal(); });
  document.addEventListener('keydown', e => { if (e.key === 'Escape') closeModal(); });

  // ----------------- Price Calculation -----------------
  function calculateTotal() {
    const pricePerKg = parseFloat(productSelect.selectedOptions[0]?.dataset.price) || 0;
    const size = parseFloat(sizeInput.value) || 0;
    const quantity = parseFloat(quantityInput.value) || 0;
    totalPriceInput.value = pricePerKg * size * quantity;
  }

  productSelect.addEventListener('change', calculateTotal);
  sizeInput.addEventListener('input', calculateTotal);
  quantityInput.addEventListener('input', calculateTotal);

  // ----------------- Status Rules & Form Validation -----------------
  function enforceStatusRules(status) {
    if (status === 'Pending') {
      if (paymentCheckbox.checked && deliveryCheckbox.checked) paymentCheckbox.checked = false;
    } else if (status === 'Confirmed' || status === 'Done') {
      paymentCheckbox.checked = true;
      deliveryCheckbox.checked = true;
    }
  }

  statusSelect.addEventListener('change', () => enforceStatusRules(statusSelect.value));

  function validateForm(e) {
    const status = statusSelect.value;
    const paymentChecked = paymentCheckbox.checked;
    const deliveryChecked = deliveryCheckbox.checked;

    if (status === 'Pending' && paymentChecked && deliveryChecked) {
      e.preventDefault();
      alert('❌ Pending orders: at least one checkbox must remain unticked.');
    } else if ((status === 'Confirmed' || status === 'Done') && (!paymentChecked || !deliveryChecked)) {
      e.preventDefault();
      alert('❌ Confirmed/Done orders: both checkboxes must be ticked.');
    } else if (!status) {
      e.preventDefault();
      alert('❌ Please select a valid status.');
    }
  }

  orderForm.addEventListener('submit', validateForm);

  // ----------------- Edit Modal -----------------
 window.editOrder = function(orderId, buyerId, productId, size, quantity, totalPrice, deadlineDate, status, paymentConfirm, deliveryConfirm, address, description) {
    const orderData = {
      order_id: orderId,
      buyer_id: buyerId,
      product_id: productId,
      size: size,
      quantity: quantity,
      total_price: totalPrice,
      deadline_date: deadlineDate,
      status: status,
      payment_confirmation: paymentConfirm,
      delivery_confirmation: deliveryConfirm,
      order_address: address,
      description: description
    };
    
    populateEditModal(orderData);
  };

  window.populateEditModal = function(orderData) {
    document.getElementById('orderId').value = orderData.order_id;
    document.getElementById('buyer').value = orderData.buyer_id;
    document.getElementById('product').value = orderData.product_id;
    document.getElementById('size').value = orderData.size;
    document.getElementById('quantity').value = orderData.quantity;
    document.getElementById('total_price').value = orderData.total_price;
    document.getElementById('deadline_date').value = orderData.deadline_date;
    document.getElementById('status').value = orderData.status;
    document.getElementById('payment').checked = orderData.payment_confirmation == 1;
    document.getElementById('delivery').checked = orderData.delivery_confirmation == 1;
    document.getElementById('address').value = orderData.order_address;
    document.getElementById('description').value = orderData.description;
    
    // Change form action to update instead of add
    document.getElementById('orderForm').action = 'update_order.php';
    document.getElementById('isEdit').value = '1';
    
    // Update modal title and button text
    document.querySelector('.modal-header h2').textContent = 'Edit Order';
    document.querySelector('.save-btn').textContent = 'Update Order';
    
    // Open the modal
    document.getElementById('modalOverlay').classList.add('active');
    document.body.style.overflow = 'hidden';
  };

  // ----------------- Delete Functionality -----------------
  window.confirmDelete = function(orderId, productName, buyerName, deadlineDate, size, quantity, totalPrice) {
    document.getElementById('deleteOrderId').textContent = orderId;
    document.getElementById('deleteProductName').textContent = productName;
    document.getElementById('deleteBuyerName').textContent = buyerName;
    document.getElementById('deleteDeadline').textContent = new Date(deadlineDate).toLocaleDateString('en-US');
    document.getElementById('deleteSize').textContent = size;
    document.getElementById('deleteQuantity').textContent = quantity;
    document.getElementById('deleteTotalPrice').textContent = totalPrice;
    document.getElementById('deleteOrderIdInput').value = orderId;
    document.getElementById('deleteModalOverlay').style.display = 'flex';
    document.body.style.overflow = 'hidden';
  };

  window.closeDeleteModal = function() {
    document.getElementById('deleteModalOverlay').style.display = 'none';
    document.body.style.overflow = 'auto';
  };

  document.getElementById('deleteModalOverlay').addEventListener('click', function(e) {
    if (e.target === this) closeDeleteModal();
  });
// ----------------- Select Elements -----------------


// ----------------- Search, Filter, Sort -----------------
function applyFilters() {
  const searchTerm = searchInput.value.toLowerCase();
  const productValue = productFilter.value;
  const statusValue = statusFilter.value.toLowerCase();
  const buyerValue = buyerFilter.value;
  const sortValue = sortFilter.value;

  const rows = table.querySelectorAll('tbody tr.order-row');

  rows.forEach(row => {
    const detailsRow = row.nextElementSibling;
    const orderId = row.cells[0].textContent.toLowerCase();
    const productName = row.cells[1].textContent.toLowerCase();
    const buyerName = row.cells[2].textContent.toLowerCase();
    const status = row.cells[7].textContent.toLowerCase();
    const rowBuyerId = row.dataset.buyerId || '';
    const rowProductId = row.dataset.productId || '';

    const matchesSearch = !searchTerm || orderId.includes(searchTerm) || productName.includes(searchTerm) || buyerName.includes(searchTerm);
    const matchesProduct = !productValue || rowProductId === productValue;
    const matchesStatus = !statusValue || statusValue === 'all' || status === statusValue;
    const matchesBuyer = !buyerValue || rowBuyerId === buyerValue;

    if (matchesSearch && matchesProduct && matchesStatus && matchesBuyer) {
      row.style.display = '';
      if (detailsRow && detailsRow.classList.contains('order-details')) detailsRow.style.display = 'none';
    } else {
      row.style.display = 'none';
      if (detailsRow && detailsRow.classList.contains('order-details')) detailsRow.style.display = 'none';
    }
  });

  // Dropdown Sorting (only for allowed columns)
  if (sortValue) {
    let colIndex = -1;
    if (sortValue === 'OrderID') colIndex = 0;
    else if (sortValue === 'Deadline Date') colIndex = 3;
    else if (sortValue === 'Total Price') colIndex = 6;

    if (colIndex >= 0) sortTable(colIndex);
  }
}

// ----------------- Sorting Function -----------------
let sortDirections = {}; // remember direction for each column
function sortTable(columnIndex) {
  const tbody = table.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr.order-row'));

  const direction = sortDirections[columnIndex] ? -sortDirections[columnIndex] : 1; // toggle
  sortDirections[columnIndex] = direction;

  rows.sort((a, b) => {
    let aValue = a.cells[columnIndex].textContent.trim();
    let bValue = b.cells[columnIndex].textContent.trim();

    if (columnIndex === 0) { // OrderID
      aValue = parseInt(aValue.replace('ORD-', ''));
      bValue = parseInt(bValue.replace('ORD-', ''));
    } else if (columnIndex === 3) { // Date
      aValue = new Date(aValue);
      bValue = new Date(bValue);
    } else if ([4,5,6].includes(columnIndex)) { // numeric columns
      aValue = parseFloat(aValue.replace(/[^0-9.-]+/g,"")) || 0;
      bValue = parseFloat(bValue.replace(/[^0-9.-]+/g,"")) || 0;
    }

    return aValue < bValue ? -direction : aValue > bValue ? direction : 0;
  });

  // Append rows in new order, keeping details rows attached
  rows.forEach(row => {
    tbody.appendChild(row);
    const detailsRow = row.nextElementSibling;
    if (detailsRow && detailsRow.classList.contains('order-details')) tbody.appendChild(detailsRow);
  });
}

// ----------------- Event Listeners -----------------
searchInput?.addEventListener('input', applyFilters);
productFilter?.addEventListener('change', applyFilters);
statusFilter?.addEventListener('change', applyFilters);
buyerFilter?.addEventListener('change', applyFilters);
sortFilter?.addEventListener('change', applyFilters);

// Header click sorting (only for allowed columns)
const unsortableColumns = [1, 2]; // Product Name, Buyer Name
table.querySelectorAll('thead th').forEach((th, idx) => {
  if (!unsortableColumns.includes(idx)) {
    th.style.cursor = 'pointer';
    th.addEventListener('click', () => sortTable(idx));
  } else {
    th.style.cursor = 'default';
  }
});

// ----------------- Reset Filter Button -----------------
resetFilterBtn?.addEventListener('click', () => {
  searchInput.value = '';
  productFilter.value = '';
  statusFilter.value = 'All';
  buyerFilter.value = '';
  sortFilter.value = '';
  applyFilters();
});


  // ----------------- Toggle Order Details -----------------
  window.toggleDetails = function(orderId) {
    const detailsRow = document.getElementById(orderId);
    detailsRow.style.display = (detailsRow.style.display === 'none' || detailsRow.style.display === '') ? 'table-row' : 'none';
  };

  // ----------------- Handle Success Messages -----------------
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('added') === '1') {
    successMessage.querySelector('p').textContent = '✅ Order added successfully!';
    successMessage.style.display = 'flex';
    setTimeout(() => successMessage.style.display = 'none', 4000);
    history.replaceState(null, '', window.location.pathname);
  }
  if (urlParams.get('updated') === '1') {
    successMessage.querySelector('p').textContent = '✅ Order updated successfully!';
    successMessage.style.display = 'flex';
    setTimeout(() => successMessage.style.display = 'none', 4000);
    history.replaceState(null, '', window.location.pathname);
  }
  if (urlParams.get('deleted') === '1') {
    document.getElementById('deleteSuccessMessage').style.display = 'flex';
    setTimeout(() => document.getElementById('deleteSuccessMessage').style.display = 'none', 4000);
    history.replaceState(null, '', window.location.pathname);
  }
  if (urlParams.get('delete_error') === '1') {
    const message = urlParams.get('message') || 'Unknown error occurred';
    document.getElementById('errorText').textContent = message;
    document.getElementById('deleteErrorMessage').style.display = 'flex';
    setTimeout(() => document.getElementById('deleteErrorMessage').style.display = 'none', 4000);
    history.replaceState(null, '', window.location.pathname);
  }

  //Report generation  :
  const reportOverlay = document.getElementById('reportOverlay');
function openReportOverlay() { reportOverlay.style.display = 'flex'; }
function closeReportOverlay() { reportOverlay.style.display = 'none'; }

// Period toggle logic
const periodRadios = document.querySelectorAll('input[name="period_mode"]');
const periodRange = document.querySelector('.period-range');
const periodMonth = document.querySelector('.period-month');
periodRadios.forEach(radio => {
  radio.addEventListener('change', () => {
    if(radio.value === 'range' && radio.checked){
      periodRange.querySelectorAll('input').forEach(i=>i.disabled=false);
      periodMonth.querySelector('input').disabled = true;
    } else if(radio.value === 'month' && radio.checked){
      periodRange.querySelectorAll('input').forEach(i=>i.disabled=true);
      periodMonth.querySelector('input').disabled = false;
    } else { // Lifetime
      periodRange.querySelectorAll('input').forEach(i=>i.disabled=true);
      periodMonth.querySelector('input').disabled = true;
    }
  });
});

// TODO: populate month picker dynamically from DB
const availableMonths = ['2025-01','2025-02','2025-03']; // Example
const monthInput = document.getElementById('reportMonth');
monthInput.setAttribute('min', availableMonths[0]);
monthInput.setAttribute('max', availableMonths[availableMonths.length-1]);
  
});
